#!/bin/bash

###############################################################################
### Juno-typing pipeline                                                    ### 
### Authors: Alejandra Hernandez-Segura, Maaike van der Beld                ### 
### Organization: Rijksinstituut voor Volksgezondheid en Milieu (RIVM)      ### 
### Department: Infektieziekteonderzoek, Diagnostiek en Laboratorium        ###
###             Surveillance (IDS), Bacteriologie (BPD)                     ### 
### Date: 03-02-2021                                                        ### 
###                                                                         ### 
### Documentation: https://github.com/AleSR13/Juno-typing                   ### 
###                                                                         ### 
###                                                                         ### 
### Snakemake rules (in order of execution):                                ### 
###     1 identify_species  Using kmerFinder                                ###
###     2 mlst7             7-locus MLST taking either filtered fastq files ###
###                         or fasta files (assemblies) as input. Both cases###
###                         using the MLST software from CGE.               ###       
###############################################################################



###############################################################################
#####                            Set-up                                   #####
###############################################################################

############################### Bash settings #################################

# Strict mode
set -eu

#################### Get name of necessary environments #######################
PATH_MAMBA_YAML="envs/mamba.yaml"
PATH_MASTER_YAML="envs/master_env.yaml"
MAMBA_NAME=$(head -n 1 ${PATH_MAMBA_YAML} | cut -f2 -d ' ')
MASTER_NAME=$(head -n 1 ${PATH_MASTER_YAML} | cut -f2 -d ' ')

############## Generate ID, host and version info ############################
source bin/include/functions.sh
PIPELINE_NAME="Juno-typing"
UNIQUE_ID=$(bin/include/generate_id.sh)
SET_HOSTNAME=$(bin/include/gethostname.sh) 
VERSION=$(git log -n 1 --pretty=format:"%H") ## TODO: this will not show up if no .git


###############################################################################
#####                  Parse arguments or set defaults                    #####
###############################################################################

################### Default values for pipeline ###############################
INPUT_DIR="raw_data"
METADATA="NotProvided"
OUTPUT_DIR="out"
DB_DIR="/mnt/db/juno/typing_db/"
SEROTYPEFINDER_MIN_COV=0.6
SEROTYPEFINDER_IDENTITY=0.85
SEROBA_MIN_COV=20
SEROBA_KMER_SIZE=71
LOCAL="FALSE"
CORES="NotProvided"
QUEUE="bio"
UPDATE_DBS="FALSE"
CLEAN="FALSE"
SNAKEMAKE_HELP="FALSE"
HELP="FALSE"
MAKE_SAMPLE_SHEET="FALSE"
SHEET_SUCCESS="FALSE"
SKIP_CONFIRMATION="FALSE"

################### Parse the commandline arguments  ##########################
# Unknown arguments are sent to Snakemake 
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -i|--input)
        INPUT_DIR="${2%/}"
        shift 
        shift 
        ;;
        -o|--output)
        OUTPUT_DIR="${2%/}"
        shift 
        shift 
        ;;
        --metadata)
        METADATA="${2}"
        shift
        shift
        ;;
        --serotypefinder_min_cov)
        SEROTYPEFINDER_MIN_COV="${2}"
        shift
        shift
        ;;
        --serotypefinder_identity)
        SEROTYPEFINDER_IDENTITY="${2}"
        shift
        shift
        ;;
        --seroba_min_cov)
        SEROBA_MIN_COV="${2}"
        shift
        shift
        ;;
        -k|--serobakmersize)
        SEROBA_KMER_SIZE="${2}"
        shift
        shift
        ;;
        -q|--queue)
        QUEUE="${2}"
        shift
        shift
        ;;
        --cores)
        CORES="${2}"
        shift
        shift
        ;;
        --local)
        LOCAL="TRUE"
        shift
        ;;
        --clean)
        CLEAN="TRUE"
        shift
        ;;
        --db)
        DB_DIR="${2%/}"
        shift
        shift
        ;;
        --update-db)
        UPDATE_DBS="TRUE"
        shift
        ;;
        -h|--help)
        HELP="TRUE"
        shift 
        ;;
        -y|--skip-confirmation)
        SKIP_CONFIRMATION="TRUE"
        shift
        ;;
        -sh|--snakemake-help)
        SNAKEMAKE_HELP="TRUE"
        shift 
        ;;
        --make-sample-sheet)
        MAKE_SAMPLE_SHEET="TRUE"
        shift 
        ;;
        *) 
        POSITIONAL+=("$1") 
        shift 
        ;;
    esac
done
set -- "${POSITIONAL[@]:-}" 

###

set +eu
if [ $QUEUE == 'bio' ] & [ ! -z ${irods_runsheet_sys__runsheet__lsf_queue} ]; then
    QUEUE=${irods_runsheet_sys__runsheet__lsf_queue}
fi
set -eu

###############################################################################
#####                        Juno-typing help                             #####
###############################################################################

if [ "${HELP:-}" == "TRUE" ]; then
    line
    bash bin/include/help.sh "$PIPELINE_NAME" "$VERSION"
    exit 0
fi


###############################################################################
#####                     Clean old output if necessary                   #####
###############################################################################

### Remove all output
if [ "${CLEAN:-}" == "TRUE" ]; then
    bash bin/include/Clean $OUTPUT_DIR
    exit 0
fi


###############################################################################
#####               Installation conda environments                       #####
###############################################################################

############## Check that necessary yaml files are present ####################
if [ ! -e "${PATH_MASTER_YAML}" ] || [ ! -e "${PATH_MAMBA_YAML}" ]; then
    line
    spacer
    echo -e "\nERROR:\n"
    echo "The necessary files to make the ${PIPELINE_NAME} master environment are missing"
    echo -e "(${PATH_MASTER_YAML} or ${PATH_MAMBA_YAML})\n"
    exit 1
fi

###################### Install mamba and master environments ##################

if [[ $PATH != *${MASTER_NAME}* ]]; then 
    set +eu
    if [[ $PATH != *${MAMBA_NAME}* ]]; then
        source activate ${MAMBA_NAME}
        if [ ! $? -eq 0 ]; then
            echo "Activate mamba failed"
            if [ "${SKIP_CONFIRMATION}" == "FALSE" ]; then
                spacer
                while read -r -p "The ${PIPELINE_NAME} master environment is not active yet, do you want to install/update it and activate it now? [y/n] " envanswer
       	        do
                    envanswer=${envanswer,,}
                    if [[ "${envanswer}" =~ ^(yes|y)$ ]]; then
                        break
                    elif [[ "${envanswer}" =~ ^(no|n)$ ]]; then
                        echo -e "The ${PIPELINE_NAME} master environment is a requirement. Exiting because cannot continue without this environment"
                        exit 1
                    else
                        echo -e "Please answer with 'yes' or 'no'"
                    fi
                done
            fi
            echo -e "\nUpdating mamba...\n"
            conda env update -f "${PATH_MAMBA_YAML}"
            source activate "${MAMBA_NAME}"
            mamba env update -f "${PATH_MASTER_YAML}"
        else
            # Update environment
            if [ $(conda env list | grep "${MASTER_NAME}" | wc -l) -gt 0 ]; then
                echo "Updating master"
                mamba env update -f "${PATH_MASTER_YAML}"
            else
                echo "Activate master failed"
                if [ "${SKIP_CONFIRMATION}" == "FALSE" ]; then
                    spacer
                    while read -r -p "The ${PIPELINE_NAME} master environment is not active yet, do you want to install/update it and activate it now? [y/n] " envanswer
       	            do
                        envanswer=${envanswer,,}
                        if [[ "${envanswer}" =~ ^(yes|y)$ ]]; then
                            break
                        elif [[ "${envanswer}" =~ ^(no|n)$ ]]; then
                            echo -e "The ${PIPELINE_NAME} master environment is a requirement. Exiting because cannot continue without this environment"
                            exit 1
                        else
                            echo -e "Please answer with 'yes' or 'no'"
                        fi
                    done
                fi
                echo -e "\nInstalling master environment...\n"
                mamba env update -f "${PATH_MASTER_YAML}"
            fi
        fi
    fi  
    source activate "${MASTER_NAME}"
    set -eu
    echo -e "\nThe master environment has been activated\n" 
fi 



###############################################################################
#####                       Snakemake help                                #####
###############################################################################

if [ "${SNAKEMAKE_HELP:-}" == "TRUE" ]; then
    line
    snakemake --help
    exit 0
fi



###############################################################################
#####                     Check argument validity                         #####
###############################################################################
if [ ! -d "${INPUT_DIR}" ]; then
    minispacer
    echo -e "The input directory specified (${INPUT_DIR}) does not exist"
    echo -e "Please specify an existing input directory"
    minispacer
    exit 1
fi

###############################################################################
#####                      Generate sample sheet                          #####
###############################################################################

# TODO :  Give better feedback if neither the input contains only fastq (and it is not Juno)
# Now it gives an awkward message saying that the input_dir/de_novo_assembly_filtered does not 
# exist. The user might not know what this means
if [ $(ls -A "${INPUT_DIR}" | grep 'R[0-9]\{1\}.*\.f[ast]\{0,3\}q\.\?[gz]\{0,2\}$' | wc -l) -gt 0 ] & 
    [ $(ls -A "${INPUT_DIR}" | grep '.fasta$' | wc -l) -gt 0 ]; then
    INPUT_FASTQ=$INPUT_DIR
    INPUT_FASTA=$INPUT_DIR
elif [ -d "${INPUT_DIR}/clean_fastq" ] & [ -d "${INPUT_DIR}/de_novo_assembly_filtered" ]; then
    INPUT_FASTQ="$INPUT_DIR/clean_fastq"
    INPUT_FASTA="$INPUT_DIR/de_novo_assembly_filtered"
else
    minispacer
    echo -e "The input directory you specified (${INPUT_DIR}) exists but is empty or does not contain any recognizable fastq and/or fasta files..."
    echo -e "Please specify a directory with input data."
    exit 1
fi

echo -e "Fastq and fasta files in input directory (${INPUT_DIR}) are present"
echo -e "Generating sample sheet..."
if [ ${METADATA} == "NotProvided" ];then 
    python bin/generate_sample_sheet.py "${INPUT_DIR}" > sample_sheet.yaml
else
    python bin/generate_sample_sheet.py "${INPUT_DIR}" --metadata ${METADATA} > sample_sheet.yaml
fi

if [ $(wc -l sample_sheet.yaml | awk '{ print $1 }') -gt 2 ]; then
    SHEET_SUCCESS="TRUE"
fi

### Checker for succesfull creation of sample_sheet
if [ "${SHEET_SUCCESS}" == "TRUE" ]; then
    echo -e "Succesfully generated the sample sheet"
    echo -e "Ready to start!"
else
    echo -e "Couldn't find files in the input directory with extension .fastq, .fq, .fastq.gz or .fq.gz"
    echo -e "Please inspect the input directory (${INPUT_DIR}) and make sure the files are in one of the formats accepted"
    exit 1
fi



###############################################################################
#####      Download and installing databases and necessary software       #####
###############################################################################

LOG_SOFTWARE_VERSIONS="config/extra_software_versions.yaml"
mkdir -p "${DB_DIR}"
source bin/download_dbs.sh "$DB_DIR" "$UPDATE_DBS" "$LOG_SOFTWARE_VERSIONS" "$SEROBA_KMER_SIZE"

###############################################################################
#####                       Run snakemake                                 #####
###############################################################################

### Actual snakemake command with checkers for required files. N.B. here the UNIQUE_ID and SET_HOSTNAME variables are set!
LOG_ID_HOST="config/variables.yaml"
PARAMETERS="config/user_parameters.yaml"

__USERPARAMETERS="
pipeline_version: "${VERSION}"
out: "${OUTPUT_DIR}"
metadata: "$METADATA"
mlst7_db: "${MLST7_DB}"
kmerfinder_db: "${KMERFINDER_DB}"
serotypefinder_db: '${SEROTYPEFINDER_DB%/}'
seroba_db: '${SEROBA_DB%/}'
serotypefinder:
    min_cov: "${SEROTYPEFINDER_MIN_COV}"
    identity_thresh: "${SEROTYPEFINDER_IDENTITY}"
seroba:
    min_cov: "${SEROBA_MIN_COV}"
    kmer_size: "${SEROBA_KMER_SIZE}"
"
echo "$__USERPARAMETERS" > $PARAMETERS

if [ -e sample_sheet.yaml ]; then
    echo -e "Starting snakemake"
    echo -e "pipeline_run:\n   identifier: ${UNIQUE_ID}" > "$LOG_ID_HOST"
    echo -e "Server_host:\n    hostname: http://${SET_HOSTNAME}" >> "$LOG_ID_HOST"
    eval $(parse_yaml ${LOG_ID_HOST} "config_")
else
    echo -e "Sample_sheet.yaml could not be found"
    echo -e "This also means that the ${PIPELINE_NAME} pipeline was unable to generate a new sample sheet for you"
    echo -e "Please inspect the input directory (${INPUT_DIR}) and make sure the right files are present"
    exit 1
fi

set +ue # Turn off bash strict mode to be able to use Snakemake + conda

if [[ $LOCAL == "TRUE" ]]; then
    if [[ $CORES == "NotProvided" ]]; then
        CORES="4"
    fi
    echo "cores: ${CORES}" >> $PARAMETERS
    snakemake --profile config --cores $CORES \
    --configfile 'config/pipeline_parameters.yaml' 'config/user_parameters.yaml' ${@}
    RESULT=$?
else
    if [[ $CORES == "NotProvided" ]]; then
        CORES="300"
    fi
    echo "cores: ${CORES}" >> $PARAMETERS
    echo "queue: ${QUEUE}" >> $PARAMETERS
    snakemake --profile config --cores $CORES \
    --configfile 'config/pipeline_parameters.yaml' 'config/user_parameters.yaml' \
    --drmaa " -q ${QUEUE} -n {threads} \
    -o ${OUTPUT_DIR}/log/drmaa/{name}_{wildcards}_{jobid}.out \
    -e ${OUTPUT_DIR}/log/drmaa/{name}_{wildcards}_{jobid}.err \
    -R \"span[hosts=1] rusage[mem={resources.mem_mb}]\" "  \
    --drmaa-log-dir ${OUTPUT_DIR}/log/drmaa ${@}
    RESULT=$?
fi

set -ue

# Clean up for future runs
rm -f "$PARAMETERS"
rm -f "$LOG_ID_HOST"
rm -f "$LOG_SOFTWARE_VERSIONS"

if [ $RESULT == 0 ] ; then
    echo "Finished successfully ${PIPELINE_NAME}"
fi

exit ${RESULT} 